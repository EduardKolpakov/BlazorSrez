@page "/register"
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Регистрация</h3>

<EditForm Model="newUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Name:</label>
        <InputText @bind-Value="newUser.Name" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="newUser.Email" />
    </div>
    <div>
        <label>Login:</label>
        <InputText @bind-Value="newUser.Login" />
    </div>
    <div>
        <label>Password:</label>
        <InputText type="password" @bind-Value="newUser.Password" />
    </div>
    <div>
        <label>Role:</label>
        <InputText @bind-Value="newUser.Role" />
    </div>
    <button type="submit">Зарегистрироваться</button>
</EditForm>

<p>@message</p>

@code {
    private CreateNewUserAndLogin newUser = new();
    private string message = "";

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/BooksUsers/Register", newUser);
            if (response.IsSuccessStatusCode)
            {
                message = "Пользователь успешно зарегистрирован.";
                NavManager.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                message = $"Ошибка при регистрации: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            message = $"Ошибка: {ex.Message}";
        }
    }

    public class CreateNewUserAndLogin
    {
        public string Login { get; set; }
        public string Password { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
    }
}